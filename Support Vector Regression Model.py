# -*- coding: utf-8 -*-
"""svr_checkpoint4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eRpQiC3zphRhPXOdMyc2OBki-p7d0_f4

# Support Vector Regression (SVR)

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('B05_discharge_soh.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

print(dataset.head)

print(X)

print(y)

y = y.reshape(len(y),1)

print(y)

"""## Feature Scaling"""



from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
sc_y = StandardScaler()

X = sc_X.fit_transform(X)
y = sc_y.fit_transform(y)

print(X)

print(y)

"""## Training the SVR model on the whole dataset"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

from sklearn.svm import SVR
regressor = SVR(kernel = 'linear')
regressor.fit(X_train, y_train)

"""## Predicting a new result"""

y_pred = regressor.predict(sc_X.transform(X_test)).reshape(-1,1)

print(y_test)

print(y_pred)

"""## Visualising the SVR results"""

plt.scatter(sc_X.inverse_transform(X)[:, 7], y, color = 'red',s=5)
plt.scatter(sc_X.inverse_transform(X_test)[:, 7], y_pred[:,:], color = 'blue',s=5)
plt.title('No.of cycles vs SoH')
plt.xlabel('cycle')
plt.ylabel('SOH')
plt.show()

"""**Evaluate**"""

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f'MAE: {mae}') #close to 0
print(f'MSE: {mse}') #close to 0
print(f'RMSE: {rmse}') #close to 0
print(f'RÂ² Score: {r2}') #close to 1

"""import joblib

# Save the trained model
joblib.dump(regressor, "svr_model.pkl")  # Replace 'model' with your trained model variable

# Save the scalers (if used)
joblib.dump(sc_X, "scaler_X.pkl")
joblib.dump(sc_y, "scaler_y.pkl")

# Load the model
model = joblib.load("svr_model.pkl")

# Load the scalers
sc_X = joblib.load("scaler_X.pkl")
sc_y = joblib.load("scaler_y.pkl")

from google.colab import files
files.download('svr_model.pkl')

## Visualising the SVR results (for higher resolution and smoother curve)

X_grid = np.arange(min(sc_X.inverse_transform(X)), max(sc_X.inverse_transform(X)), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))
plt.scatter(sc_X.inverse_transform(X), sc_y.inverse_transform(y), color = 'red')
plt.plot(X_grid, sc_y.inverse_transform(regressor.predict(sc_X.transform(X_grid)).reshape(-1,1)), color = 'blue')
plt.title('Truth or Bluff (SVR)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()
"""